---

- name: install app dependencies and run app with PM2
  hosts: web
  become: true
  gather_facts: yes

  tasks:
    - name: update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: install nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: install curl
      ansible.builtin.apt:
        name: curl
        state: present

    - name: add Node.js 20.x setup script
      ansible.builtin.shell: curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

    - name: install nodejs
      ansible.builtin.apt:
        name: nodejs
        state: present
    
    - name: install git
      ansible.builtin.apt:
        name: git
        state: present

    - name: clone app repo
      ansible.builtin.git:
        repo: https://github.com/charleybolton/sparta-first-app.git
        dest: /home/ubuntu/sparta-first-app
        version: main

    - name: install npm dependencies
      ansible.builtin.shell: npm install
      args:
        chdir: /home/ubuntu/sparta-first-app/app

    - name: install pm2 globally
      ansible.builtin.shell: npm install -g pm2

    - name: stop app if already running
      ansible.builtin.shell: pm2 stop app || true

    - name: start app with pm2
      ansible.builtin.shell: pm2 start app.js --name app
      args:
        chdir: /home/ubuntu/sparta-first-app/app

    - name: save pm2 process list
      ansible.builtin.shell: pm2 save

    - name: enable pm2 startup on reboot
      ansible.builtin.shell: pm2 startup systemd -u ubuntu --hp /home/ubuntu

    - name: allow port 3000 through UFW
      ansible.builtin.ufw:
        rule: allow
        port: 3000
        proto: tcp

##########################################
# EXPLANATION OF PLAYBOOK
# ---                                         -> Marks the start of the YAML document.
#
# - name: install app dependencies and run app with PM2 -> Names the play “install app dependencies and run app with PM2”.
# hosts: web                                  -> Targets all hosts within the [web] group from the inventory file.
# become: true                                -> Executes all tasks with elevated (sudo) privileges.
# gather_facts: yes                           -> Collects detailed system facts (e.g. OS, version, hardware) before running tasks.
#
# tasks:                                      -> Begins the list of tasks that Ansible will execute sequentially.
#
#   - name: update apt cache                  -> Names the first task “update apt cache”.
#     ansible.builtin.apt:                    -> Uses Ansible’s built-in apt module.
#       update_cache: yes                     -> Updates the local package index (same as “sudo apt update”).
#
#   - name: install nginx                     -> Names the second task “install nginx”.
#     ansible.builtin.apt:                    -> Uses the apt module.
#       name: nginx                           -> Specifies the “nginx” package.
#       state: present                        -> Ensures Nginx is installed (idempotent — does nothing if already present).
#
#   - name: install curl                      -> Names the third task “install curl”.
#     ansible.builtin.apt:                    -> Uses the apt module.
#       name: curl                            -> Specifies the “curl” package.
#       state: present                        -> Ensures curl is installed (idempotent).
#
#   - name: add Node.js 20.x setup script     -> Names the fourth task “add Node.js 20.x setup script”.
#     ansible.builtin.shell: curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
#                                              -> Uses the shell module to download and execute the NodeSource setup script, 
#                                                 adding the Node.js 20.x repository to APT sources.
#
#   - name: install nodejs                    -> Names the fifth task “install nodejs”.
#     ansible.builtin.apt:                    -> Uses the apt module.
#       name: nodejs                          -> Installs the “nodejs” package.
#       state: present                        -> Ensures Node.js is installed; skips if already present.
#
#   - name: install git                       -> Names the sixth task “install git”.
#     ansible.builtin.apt:                    -> Uses the apt module.
#       name: git                             -> Installs the “git” package.
#       state: present                        -> Ensures Git is installed; does nothing if already present.
#
#   - name: clone app repo                    -> Names the seventh task “clone app repo”.
#     ansible.builtin.git:                    -> Uses the Git module to clone a repository.
#       repo: https://github.com/charleybolton/sparta-first-app.git
#                                              -> The remote GitHub repository to clone.
#       dest: /home/ubuntu/sparta-first-app   -> Local destination directory for the repository.
#       version: main                         -> Specifies the branch to clone (main branch).
#
#   - name: install npm dependencies          -> Names the eighth task “install npm dependencies”.
#     ansible.builtin.shell: npm install      -> Runs “npm install” to install Node.js dependencies from package.json.
#     args:
#       chdir: /home/ubuntu/sparta-first-app/app
#                                              -> Changes directory into the app folder before executing the command.
#
#   - name: install pm2 globally              -> Names the ninth task “install pm2 globally”.
#     ansible.builtin.shell: npm install -g pm2
#                                              -> Installs the PM2 process manager globally so it can be used by any user.
#
#   - name: stop app if already running       -> Names the tenth task “stop app if already running”.
#     ansible.builtin.shell: pm2 stop app || true
#                                              -> Uses PM2 to stop the existing “app” process if it’s running.
#                                                 The “|| true” ensures the task doesn’t fail if the process doesn’t exist.
#
#   - name: start app with pm2                -> Names the eleventh task “start app with pm2”.
#     ansible.builtin.shell: pm2 start app.js --name app
#                                              -> Starts the Node.js app using PM2, naming the process “app”.
#     args:
#       chdir: /home/ubuntu/sparta-first-app/app
#                                              -> Changes directory into the app folder before executing the command.
#
#   - name: save pm2 process list             -> Names the twelfth task “save pm2 process list”.
#     ansible.builtin.shell: pm2 save
#                                              -> Saves the current PM2 process list so that the same processes
#                                                 can be restored after a reboot.
#
#   - name: enable pm2 startup on reboot      -> Names the thirteenth task “enable pm2 startup on reboot”.
#     ansible.builtin.shell: pm2 startup systemd -u ubuntu --hp /home/ubuntu
#                                              -> Configures PM2 to automatically start on boot using systemd,
#                                                 for the “ubuntu” user, with the specified home path.
#
#   - name: allow port 3000 through UFW        -> Names the fourteenth task “allow port 3000 through UFW”.
#     ansible.builtin.ufw:                     -> Uses the UFW (Uncomplicated Firewall) module.
#       rule: allow                            -> Allows the specified connection.
#       port: 3000                             -> Opens TCP port 3000 (used by the Node.js app).
#       proto: tcp                             -> Restricts the rule to the TCP protocol.
##########################################
